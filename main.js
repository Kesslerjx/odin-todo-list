(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),a=n.n(r),i=n(645),o=n.n(i)()(a());o.push([e.id,':root {\n    --red-color: #DC0000;\n    --dark-gray: #1F1F1F;\n    --lighter-gray: #303030;\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n}\n\nbutton, input[type=date]  {\n    font-family: inherit;\n}\n\nbutton:hover {\n    box-shadow: 0px 0px 5px rgb(0 0 0 / 0.5);\n}\n\nbutton:active {\n    box-shadow: inset 0px 0px 5px rgb(0 0 0 / 0.5);\n}\n\n/* DARK MODE */\n\n.dark-mode {\n    background-color: var(--dark-gray);\n    color: white;\n}\n\n.dark-mode img {\n    filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(199deg) brightness(102%) contrast(105%);\n}\n\n.dark-mode button:hover {\n    box-shadow: 0px 0px 10px rgb(255 255 255 / 0.7);\n\n}\n\n.dark-mode header {\n    background-color: var(--dark-gray);\n}\n\n.dark-mode main > div {\n    box-shadow: 0px 0px 10px rgb(0 0 0 / 0.5);\n}\n\n.dark-mode hr {\n    background-color: white;\n}\n\n.dark-mode .dropdown-content {\n    background-color: var(--dark-gray);\n}\n\n.dark-mode .dropdown-content p {\n    color: white;\n}\n\n/* DARK MODE */\n\na:visited {\n    color: orange;\n}\n\np {\n    margin: 0;\n    padding: 0;\n}\n\n#content {\n    display: flex;\n    height: 100vh;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\nmain {\n    display: flex;\n    justify-content: center;\n}\n\n.main-div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-width: 0;\n    width: 500px;\n    padding: 50px;\n    margin: 10px;\n    box-shadow: 0px 0px 5px rgb(0 0 0 / 0.2);\n    border-radius: 10px;\n}\n\n.div-gap {\n    gap: 10px;\n}\n\nhr {\n    width: 100%;\n    border: none;\n    height: 1px;\n    background-color: black;\n}\n\n.section-title {\n    font-size: 1.8rem;\n    font-weight: 300;\n}\n\n.section-title-smaller {\n    font-size: 1.6rem;\n    font-weight: 300;\n}\n\n.bottom-border {\n    border-bottom: 1px solid black;\n    padding-bottom: 5px;\n}\n\n/* HEADER */\n\nheader {\n    display: flex;\n    justify-content: space-between;\n    padding: 20px;\n    position: sticky;\n    top: 0;\n    box-shadow: 0px 5px 5px rgb(0 0 0 / 0.2);\n    background-color: white;\n    z-index: 1;\n}\n\n.header-title {\n    font-weight: 300;\n    font-size: clamp(1.5rem, 2.2vw, 2.5rem);\n    letter-spacing: 0.7rem;\n    margin-right: -0.7rem;\n    user-select: none;\n    align-self: center;\n}\n\n#settings-button:hover {\n    animation: rotate 1s ease-out;\n}\n\n#add-item-button:hover, #header-title:hover {\n    transition: transform 50ms ease-out;\n    transform: scale(1.1);\n}\n\n#settings-button:active, #add-item-button:active, #header-title:active {\n    transition: transform 50ms ease-out;\n    transform: scale(0.90);\n}\n\n@keyframes rotate {\n    0% {transform: rotate(-360deg)};\n}\n\n/* HEADER */\n\n#content > div {\n    height: 100%;\n}\n\n/* SETTINGS */\n\n.mode-div {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    margin-bottom: 50px;\n}\n\n.mode-div > p {\n    font-size: 1.8rem;\n    font-weight: 300;\n}\n\n.checkbox {\n    width: 20px;\n    height: 20px;\n}\n\n.clear-button, .back-button, .create-list-button, .edit-button {\n    color: white;\n    border: none;\n    padding: 10px;\n    border-radius: 10px;\n    font-size: 1.5rem;\n    letter-spacing: 0.6rem;\n}\n\n.clear-button {\n    background-color: var(--red-color);\n    margin-bottom: 15px;\n}\n\n.back-button {\n    background-color: lightgray;\n}\n\n/* SETTINGS */\n\n/* HOME */\n\n.section-div {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 35px;\n}\n\n.section-div img {\n    width: 30px;\n}\n\n.list-div {\n    border-bottom: solid 1px black;\n    padding: 10px;\n    margin-top: 5px;\n    display: flex;\n    justify-content: space-between;\n}\n\n.list-div p {\n    align-self: center;\n}\n\n/* HOME */\n\n/* CREATE LIST PAGE */\n\n.user-input {\n    padding: 10px;\n    font-size: 1.1rem;\n    border-radius: 10px;\n    border: solid;\n}\n\n.create-list-button {\n    background-color: darkgreen;\n}\n\n.edit-button {\n    background-color: blue;\n}\n\n/* CREATE LIST PAGE */\n\n/* CREATE ITEM PAGE */\n\n.select-div {\n    display: flex;\n    gap: 10px;\n}\n\n.select-div p {\n    align-self: center;\n}\n\n.select-div select, .select-div input {\n    flex: 1;\n}\n\n/* CREATE ITEM PAGE */\n\n/* LIST PAGE */\n\n.list-page .section-title-smaller {\n    margin-top: 15px;\n}\n\n.item-div {\n    display: flex;\n    padding: 10px 0;\n    border-bottom: solid 1px black;\n    align-items: center;\n}\n\n.item-div p {\n    margin-right: 10px;\n}\n\n.item-due-date {\n    font-size: 0.7rem;\n}\n\n.checkbox-icon {\n    width: 30px;\n    margin-right: 15px;\n    \n}\n\n.dropdown {\n    margin-left: auto;\n    position: relative;\n}\n\n.dropdown-content {\n    display: none;\n    position: absolute;\n    z-index: 1;\n    background-color: white;\n    box-shadow: 0px 0px 5px rgb(0 0 0 / 0.5);\n    border-radius: 5px;\n}\n\n.dropdown-content p {\n    padding: 5px 10px;\n    user-select: none;\n}\n\n.dropdown-content p:hover {\n    transform: scale(1.1);\n}\n\n.dropdown:hover .dropdown-content{\n    display: block;\n}\n\n.dropdown-button {\n    width: 40px;\n}\n\n/* LIST PAGE */\n\n/* FOOTER */\n\nfooter {\n    display: flex;\n    justify-content: center;\n    padding: 20px;\n    box-shadow: 0px -5px 5px rgb(0 0 0 / 0.2);\n\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\n    --red-color: #DC0000;\n    --dark-gray: #1F1F1F;\n    --lighter-gray: #303030;\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n}\n\nbutton, input[type=date]  {\n    font-family: inherit;\n}\n\nbutton:hover {\n    box-shadow: 0px 0px 5px rgb(0 0 0 / 0.5);\n}\n\nbutton:active {\n    box-shadow: inset 0px 0px 5px rgb(0 0 0 / 0.5);\n}\n\n/* DARK MODE */\n\n.dark-mode {\n    background-color: var(--dark-gray);\n    color: white;\n}\n\n.dark-mode img {\n    filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(199deg) brightness(102%) contrast(105%);\n}\n\n.dark-mode button:hover {\n    box-shadow: 0px 0px 10px rgb(255 255 255 / 0.7);\n\n}\n\n.dark-mode header {\n    background-color: var(--dark-gray);\n}\n\n.dark-mode main > div {\n    box-shadow: 0px 0px 10px rgb(0 0 0 / 0.5);\n}\n\n.dark-mode hr {\n    background-color: white;\n}\n\n.dark-mode .dropdown-content {\n    background-color: var(--dark-gray);\n}\n\n.dark-mode .dropdown-content p {\n    color: white;\n}\n\n/* DARK MODE */\n\na:visited {\n    color: orange;\n}\n\np {\n    margin: 0;\n    padding: 0;\n}\n\n#content {\n    display: flex;\n    height: 100vh;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\nmain {\n    display: flex;\n    justify-content: center;\n}\n\n.main-div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    min-width: 0;\n    width: 500px;\n    padding: 50px;\n    margin: 10px;\n    box-shadow: 0px 0px 5px rgb(0 0 0 / 0.2);\n    border-radius: 10px;\n}\n\n.div-gap {\n    gap: 10px;\n}\n\nhr {\n    width: 100%;\n    border: none;\n    height: 1px;\n    background-color: black;\n}\n\n.section-title {\n    font-size: 1.8rem;\n    font-weight: 300;\n}\n\n.section-title-smaller {\n    font-size: 1.6rem;\n    font-weight: 300;\n}\n\n.bottom-border {\n    border-bottom: 1px solid black;\n    padding-bottom: 5px;\n}\n\n/* HEADER */\n\nheader {\n    display: flex;\n    justify-content: space-between;\n    padding: 20px;\n    position: sticky;\n    top: 0;\n    box-shadow: 0px 5px 5px rgb(0 0 0 / 0.2);\n    background-color: white;\n    z-index: 1;\n}\n\n.header-title {\n    font-weight: 300;\n    font-size: clamp(1.5rem, 2.2vw, 2.5rem);\n    letter-spacing: 0.7rem;\n    margin-right: -0.7rem;\n    user-select: none;\n    align-self: center;\n}\n\n#settings-button:hover {\n    animation: rotate 1s ease-out;\n}\n\n#add-item-button:hover, #header-title:hover {\n    transition: transform 50ms ease-out;\n    transform: scale(1.1);\n}\n\n#settings-button:active, #add-item-button:active, #header-title:active {\n    transition: transform 50ms ease-out;\n    transform: scale(0.90);\n}\n\n@keyframes rotate {\n    0% {transform: rotate(-360deg)};\n}\n\n/* HEADER */\n\n#content > div {\n    height: 100%;\n}\n\n/* SETTINGS */\n\n.mode-div {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    margin-bottom: 50px;\n}\n\n.mode-div > p {\n    font-size: 1.8rem;\n    font-weight: 300;\n}\n\n.checkbox {\n    width: 20px;\n    height: 20px;\n}\n\n.clear-button, .back-button, .create-list-button, .edit-button {\n    color: white;\n    border: none;\n    padding: 10px;\n    border-radius: 10px;\n    font-size: 1.5rem;\n    letter-spacing: 0.6rem;\n}\n\n.clear-button {\n    background-color: var(--red-color);\n    margin-bottom: 15px;\n}\n\n.back-button {\n    background-color: lightgray;\n}\n\n/* SETTINGS */\n\n/* HOME */\n\n.section-div {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 35px;\n}\n\n.section-div img {\n    width: 30px;\n}\n\n.list-div {\n    border-bottom: solid 1px black;\n    padding: 10px;\n    margin-top: 5px;\n    display: flex;\n    justify-content: space-between;\n}\n\n.list-div p {\n    align-self: center;\n}\n\n/* HOME */\n\n/* CREATE LIST PAGE */\n\n.user-input {\n    padding: 10px;\n    font-size: 1.1rem;\n    border-radius: 10px;\n    border: solid;\n}\n\n.create-list-button {\n    background-color: darkgreen;\n}\n\n.edit-button {\n    background-color: blue;\n}\n\n/* CREATE LIST PAGE */\n\n/* CREATE ITEM PAGE */\n\n.select-div {\n    display: flex;\n    gap: 10px;\n}\n\n.select-div p {\n    align-self: center;\n}\n\n.select-div select, .select-div input {\n    flex: 1;\n}\n\n/* CREATE ITEM PAGE */\n\n/* LIST PAGE */\n\n.list-page .section-title-smaller {\n    margin-top: 15px;\n}\n\n.item-div {\n    display: flex;\n    padding: 10px 0;\n    border-bottom: solid 1px black;\n    align-items: center;\n}\n\n.item-div p {\n    margin-right: 10px;\n}\n\n.item-due-date {\n    font-size: 0.7rem;\n}\n\n.checkbox-icon {\n    width: 30px;\n    margin-right: 15px;\n    \n}\n\n.dropdown {\n    margin-left: auto;\n    position: relative;\n}\n\n.dropdown-content {\n    display: none;\n    position: absolute;\n    z-index: 1;\n    background-color: white;\n    box-shadow: 0px 0px 5px rgb(0 0 0 / 0.5);\n    border-radius: 5px;\n}\n\n.dropdown-content p {\n    padding: 5px 10px;\n    user-select: none;\n}\n\n.dropdown-content p:hover {\n    transform: scale(1.1);\n}\n\n.dropdown:hover .dropdown-content{\n    display: block;\n}\n\n.dropdown-button {\n    width: 40px;\n}\n\n/* LIST PAGE */\n\n/* FOOTER */\n\nfooter {\n    display: flex;\n    justify-content: center;\n    padding: 20px;\n    box-shadow: 0px -5px 5px rgb(0 0 0 / 0.2);\n\n}'],sourceRoot:""}]);const d=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(o[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],d=0;d<e.length;d++){var s=e[d],c=r.base?s[0]+r.base:s[0],u=i[c]||0,l="".concat(c," ").concat(u);i[c]=u+1;var m=n(l),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==m)t[m].references++,t[m].updater(A);else{var p=a(A,r);r.byIndex=d,t.splice(d,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var d=n(i[o]);t[d].references--}for(var s=r(e,a),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),i=n(569),o=n.n(i),d=n(565),s=n.n(d),c=n(216),u=n.n(c),l=n(589),m=n.n(l),A=n(426),p={};p.styleTagTransform=m(),p.setAttributes=s(),p.insert=o().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=u(),t()(A.Z,p),A.Z&&A.Z.locals&&A.Z.locals;const f=n.p+"2627fba0bc30c656f0e0.svg",g=n.p+"38d5f795970601b2c451.svg";class h{constructor(e,t,n){this.name=e,this.description=t,this.items=[],this.deletable=n}}class v{constructor(e,t,n=""){this.description=e,this.list=t,this.date=n}}function C(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function b(e){C(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function w(e,t){C(2,arguments);var n=b(e),r=b(t),a=n.getTime()-r.getTime();return a>0?-1:a<0?1:a}Math.pow(10,8);var x=36e5;function y(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function E(e,t){C(1,arguments);var n=t||{},r=null==n.additionalDigits?2:y(n.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,i=S(e);if(i.date){var o=D(i.date,r);a=L(o.restDateString,o.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var d,s=a.getTime(),c=0;if(i.time&&(c=N(i.time),isNaN(c)))return new Date(NaN);if(!i.timezone){var u=new Date(s+c),l=new Date(0);return l.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),l.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),l}return d=P(i.timezone),isNaN(d)?new Date(NaN):new Date(s+c+d)}var I={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},B=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,k=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,T=/^([+-])(\d{2})(?::?(\d{2}))?$/;function S(e){var t,n={},r=e.split(I.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],I.timeZoneDelimiter.test(n.date)&&(n.date=e.split(I.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=I.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function D(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?a:100*i,restDateString:e.slice((r[1]||r[2]).length)}}function L(e,t){if(null===t)return new Date(NaN);var n=e.match(B);if(!n)return new Date(NaN);var r=!!n[4],a=M(n[1]),i=M(n[2])-1,o=M(n[3]),d=M(n[4]),s=M(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,d,s)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,d,s):new Date(NaN);var c=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(Y[t]||(j(e)?29:28))}(t,i,o)&&function(e,t){return t>=1&&t<=(j(e)?366:365)}(t,a)?(c.setUTCFullYear(t,i,Math.max(a,o)),c):new Date(NaN)}function M(e){return e?parseInt(e):1}function N(e){var t=e.match(k);if(!t)return NaN;var n=U(t[1]),r=U(t[2]),a=U(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*x+6e4*r+1e3*a:NaN}function U(e){return e&&parseFloat(e.replace(",","."))||0}function P(e){if("Z"===e)return 0;var t=e.match(T);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*x+6e4*a):NaN}var Y=[31,null,31,30,31,30,31,31,30,31,30,31];function j(e){return e%400==0||e%4==0&&e%100!=0}const W="dark",O="todo list";let q=F();function z(e){for(let t=0;t<q.length;t++)if(q[t].name.toLowerCase()===e.toLowerCase())return!0;return!1}function H(){window.localStorage.setItem(O,JSON.stringify(q))}function F(){if(null===window.localStorage.getItem(O)){let e=[],t=new h("Default","Default list",!1);e.push(t),window.localStorage.setItem(O,JSON.stringify(e))}return JSON.parse(window.localStorage.getItem(O))}function R(e,t){let n=q.findIndex((t=>t.name===e));q[n].items.push(t),H()}function G(e){let t=q.findIndex((t=>t.name===e.list));q[t].items=q[t].items.filter((t=>t!==e)),H()}function X(){let e=[],t=new Date;t.setHours(0,0,0,0);for(let n=0;n<q.length;n++)for(let r=0;r<q[n].items.length;r++)0===w(t,E(q[n].items[r].date))&&e.push(q[n].items[r]);return e}function J(){return null===window.localStorage.getItem(W)&&window.localStorage.setItem(W,JSON.stringify(!1)),JSON.parse(window.localStorage.getItem(W))}function Z(e){window.localStorage.setItem(W,JSON.stringify(e))}const Q=n.p+"8c49e22511b12195c57e.svg",$=n.p+"c4947d8f44c936b5ec92.svg",_=n.p+"1dde06eb5e3aae1f87a5.svg";function K(e){return C(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function V(e){if(C(1,arguments),!K(e)&&"number"!=typeof e)return!1;var t=b(e);return!isNaN(Number(t))}var ee={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function te(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}const ne={date:te({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:te({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:te({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var re={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ae(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var d=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;r=e.values[s]||e.values[d]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const ie={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:ae({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ae({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:ae({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ae({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ae({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function oe(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,d=i[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?se(s,(function(e){return e.test(d)})):de(s,(function(e){return e.test(d)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var u=t.slice(d.length);return{value:o,rest:u}}}function de(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function se(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var ce,ue={ordinalNumber:(ce={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(ce.matchPattern);if(!n)return null;var r=n[0],a=e.match(ce.parsePattern);if(!a)return null;var i=ce.valueCallback?ce.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=e.slice(r.length);return{value:i,rest:o}}),era:oe({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:oe({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:oe({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:oe({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:oe({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const le={code:"en-US",formatDistance:function(e,t,n){var r,a=ee[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:ne,formatRelative:function(e,t,n,r){return re[e]},localize:ie,match:ue,options:{weekStartsOn:0,firstWeekContainsDate:1}};function me(e,t){C(2,arguments);var n=b(e).getTime(),r=y(t);return new Date(n+r)}function Ae(e,t){C(2,arguments);var n=y(t);return me(e,-n)}var pe=864e5;function fe(e){C(1,arguments);var t=1,n=b(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function ge(e){C(1,arguments);var t=b(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=fe(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=fe(i);return t.getTime()>=a.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}function he(e){C(1,arguments);var t=ge(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=fe(n);return r}var ve=6048e5;function Ce(e,t){C(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,i=null==a?0:y(a),o=null==n.weekStartsOn?i:y(n.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=b(e),s=d.getUTCDay(),c=(s<o?7:0)+s-o;return d.setUTCDate(d.getUTCDate()-c),d.setUTCHours(0,0,0,0),d}function be(e,t){C(1,arguments);var n=b(e),r=n.getUTCFullYear(),a=t||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,d=null==o?1:y(o),s=null==a.firstWeekContainsDate?d:y(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,s),c.setUTCHours(0,0,0,0);var u=Ce(c,t),l=new Date(0);l.setUTCFullYear(r,0,s),l.setUTCHours(0,0,0,0);var m=Ce(l,t);return n.getTime()>=u.getTime()?r+1:n.getTime()>=m.getTime()?r:r-1}function we(e,t){C(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:y(a),o=null==n.firstWeekContainsDate?i:y(n.firstWeekContainsDate),d=be(e,t),s=new Date(0);s.setUTCFullYear(d,0,o),s.setUTCHours(0,0,0,0);var c=Ce(s,t);return c}var xe=6048e5;function ye(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const Ee=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return ye("yy"===t?r%100:r,t.length)},Ie=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):ye(n+1,2)},Be=function(e,t){return ye(e.getUTCDate(),t.length)},ke=function(e,t){return ye(e.getUTCHours()%12||12,t.length)},Te=function(e,t){return ye(e.getUTCHours(),t.length)},Se=function(e,t){return ye(e.getUTCMinutes(),t.length)},De=function(e,t){return ye(e.getUTCSeconds(),t.length)},Le=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return ye(Math.floor(r*Math.pow(10,n-3)),t.length)};var Me={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return Ee(e,t)},Y:function(e,t,n,r){var a=be(e,r),i=a>0?a:1-a;return"YY"===t?ye(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):ye(i,t.length)},R:function(e,t){return ye(ge(e),t.length)},u:function(e,t){return ye(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return ye(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return ye(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return Ie(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return ye(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){C(1,arguments);var n=b(e),r=Ce(n,t).getTime()-we(n,t).getTime();return Math.round(r/xe)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):ye(a,t.length)},I:function(e,t,n){var r=function(e){C(1,arguments);var t=b(e),n=fe(t).getTime()-he(t).getTime();return Math.round(n/ve)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):ye(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):Be(e,t)},D:function(e,t,n){var r=function(e){C(1,arguments);var t=b(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/pe)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):ye(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return ye(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return ye(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return ye(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return ke(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Te(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):ye(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):ye(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):Se(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):De(e,t)},S:function(e,t){return Le(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return Ue(a);case"XXXX":case"XX":return Pe(a);default:return Pe(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Ue(a);case"xxxx":case"xx":return Pe(a);default:return Pe(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Ne(a,":");default:return"GMT"+Pe(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Ne(a,":");default:return"GMT"+Pe(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return ye(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return ye((r._originalDate||e).getTime(),t.length)}};function Ne(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=t||"";return n+String(a)+o+ye(i,2)}function Ue(e,t){return e%60==0?(e>0?"-":"+")+ye(Math.abs(e)/60,2):Pe(e,t)}function Pe(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+ye(Math.floor(a/60),2)+n+ye(a%60,2)}const Ye=Me;function je(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function We(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const Oe={p:We,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return je(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",je(a,t)).replace("{{time}}",We(i,t))}};function qe(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var ze=["D","DD"],He=["YY","YYYY"];function Fe(e){return-1!==ze.indexOf(e)}function Re(e){return-1!==He.indexOf(e)}function Ge(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Xe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Je=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ze=/^'([^]*?)'?$/,Qe=/''/g,$e=/[a-zA-Z]/;function _e(e){return e.match(Ze)[1].replace(Qe,"'")}const Ke=e=>{let t=document.createElement("div"),n=document.createElement("img"),r=document.createElement("div"),a=document.createElement("p"),i=document.createElement("p"),o=document.createElement("div"),d=document.createElement("img"),s=document.createElement("div"),c=document.createElement("p"),u=document.createElement("p");function l(e){null===e.currentTarget?e.target.parentElement.remove():e.currentTarget.parentElement.parentElement.parentElement.remove()}return t.classList.add("item-div"),i.classList.add("item-due-date"),n.classList.add("checkbox-icon"),o.classList.add("dropdown"),d.classList.add("dropdown-button"),s.classList.add("dropdown-content"),a.textContent=e.description,""!==e.date?i.textContent=function(e,t,n){C(2,arguments);var r=String(t),a=n||{},i=a.locale||le,o=i.options&&i.options.firstWeekContainsDate,d=null==o?1:y(o),s=null==a.firstWeekContainsDate?d:y(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=i.options&&i.options.weekStartsOn,u=null==c?0:y(c),l=null==a.weekStartsOn?u:y(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var m=b(e);if(!V(m))throw new RangeError("Invalid time value");var A=qe(m),p=Ae(m,A),f={firstWeekContainsDate:s,weekStartsOn:l,locale:i,_originalDate:m};return r.match(Je).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Oe[t])(e,i.formatLong,f):e})).join("").match(Xe).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return _e(n);var o=Ye[r];if(o)return!a.useAdditionalWeekYearTokens&&Re(n)&&Ge(n,t,e),!a.useAdditionalDayOfYearTokens&&Fe(n)&&Ge(n,t,e),o(p,n,i.localize,f);if(r.match($e))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("")}(E(e.date),"MMMM dd, yyyy"):i.textContent="No due date",c.textContent="Edit",u.textContent="Delete",n.src=$,d.src=Q,n.addEventListener("click",(function(t){console.log("Checkbox item pressed"),n.src=_,setTimeout((()=>{G(e),l(t)}),2e3)})),c.addEventListener("click",(function(){console.log("Edit item pressed"),nt(tt.EditItem,e)})),u.addEventListener("click",(function(t){console.log("Delete item pressed"),confirm("Are you sure you want to delete this item?")?(G(e),l(t)):console.log("User canceled item delete")})),r.append(a,i),s.append(c,u),o.append(d,s),t.append(n,r,o),t},Ve=e=>{let t=document.createElement("div"),n=document.createElement("p"),r=document.createElement("div"),a=document.createElement("img"),i=document.createElement("div"),o=document.createElement("p"),d=document.createElement("p");return t.classList.add("list-div"),r.classList.add("dropdown"),a.classList.add("dropdown-button"),i.classList.add("dropdown-content"),n.textContent=e.name,o.textContent="Edit",d.textContent="Delete",a.src=Q,t.addEventListener("click",(function(e){console.log("list pressed");let t=e.currentTarget.parentElement.children,n=Array.from(t).indexOf(e.currentTarget);nt(tt.ShowList,q[n])})),o.addEventListener("click",(function(t){console.log("Edit list pressed"),t.stopPropagation(),nt(tt.EditList,e)})),d.addEventListener("click",(function(t){var n;console.log("Delete list pressed"),t.stopPropagation(),confirm("Are you sure you want to delete this list?")?(n=e,q=q.filter((e=>e!==n)),H(),function(e){e.currentTarget.parentElement.parentElement.parentElement.remove()}(t)):console.log("User canceled item delete")})),t.append(n),e.deletable?(i.append(o,d),r.append(a,i),t.append(r)):n.style.padding="11px 0px",t},et=e=>{let t=document.createElement("div"),n=document.createElement("p"),r=document.createElement("input"),a=document.createElement("div"),i=document.createElement("p"),o=document.createElement("select"),d=document.createElement("div"),s=document.createElement("p"),c=document.createElement("input"),u=document.createElement("button"),l=document.createElement("p");function m(e){l.textContent=e}return n.textContent="Edit Item",i.textContent="List",s.textContent="Date",u.textContent="Edit",l.textContent=" ",r.value=e.description,r.placeholder="Description... (required)",r.type="text",c.type="date",c.value=e.date,t.classList.add("main-div","div-gap"),n.classList.add("section-title"),r.classList.add("user-input"),a.classList.add("select-div"),o.classList.add("user-input"),d.classList.add("select-div"),c.classList.add("user-input"),u.classList.add("edit-button"),l.style.textAlign="center",r.id="new-item-description",o.id="new-item-list",c.id="new-item-date",l.id="create-item-message",u.addEventListener("click",(function(){""===r.value?m("Description is required"):""==c.value||function(){let e=new Date;return e.setHours(0,0,0,0),w(e,E(c.value))>=0}(c.value)?(function(e,t,n,r){let a=new v(t,n,r);e.list!==n?(G(e),R(n,a)):function(e,t){let n=q.findIndex((t=>t.name===e.list)),r=q[n].items.findIndex((t=>t===e));q[n].items[r]=t,H()}(e,a)}(e,r.value,o.value,c.value),window.history.back()):m("Date is earlier than today")})),a.append(i,o),d.append(s,c),t.append(n,r,a,d,u,l),function(){for(let e=0;e<q.length;e++){let t=document.createElement("option");t.text=q[e].name,o.append(t)}}(),t},tt={Home:"home",Settings:"settings",ShowList:"show-list",CreateList:"create-list",EditList:"edit-list",CreateItem:"create-item",ShowItem:"show-item",EditItem:"edit-item"};function nt(e,t){let n=((e,t)=>({name:e,data:t}))(e,t);window.history.pushState(JSON.stringify(n),""),function(){for(;at().firstChild;)at().removeChild(at().firstChild)}(),at().append(function(e){switch(e.name){case tt.Settings:return(()=>{let e=document.createElement("div"),t=document.createElement("div"),n=document.createElement("p"),r=document.createElement("input"),a=document.createElement("button");return n.textContent="Dark Mode",r.type="checkbox",a.textContent="Clear Data",r.checked=J(),e.classList.add("main-div"),t.classList.add("mode-div"),a.classList.add("clear-button"),r.classList.add("checkbox"),r.addEventListener("change",(function(){r.checked?Z(!0):Z(!1),rt()})),a.addEventListener("click",(function(){confirm("Are you sure you want to clear ALL of your data?")?(window.localStorage.clear(),q=[],q=F(),rt(),r.checked=J()):console.log("Clear data was canceled")})),t.append(n,r),e.append(t,a),e})();case tt.CreateList:return(()=>{let e=document.createElement("div"),t=document.createElement("p"),n=document.createElement("input"),r=document.createElement("input"),a=document.createElement("p"),i=document.createElement("button");function o(e){a.textContent=e}return e.classList.add("main-div","div-gap"),t.classList.add("section-title"),n.classList.add("user-input"),r.classList.add("user-input"),i.classList.add("create-list-button"),t.textContent="Create a List",n.type="text",n.id="new-list-name",n.placeholder="List name...",r.type="text",r.id="new-list-description",r.placeholder="List description...",a.textContent=" ",a.id="create-list-message",a.style.textAlign="center",i.textContent="Create",i.addEventListener("click",(function(){var e;""===n.value?o("Name field is empty"):z(n.value)?o("Name already exist"):(e=new h(n.value,r.value,!0),q.push(e),H(),n.value="",r.value="",a.textContent="")})),e.append(t,n,r,i,a),e})();case tt.EditList:return(e=>{let t=document.createElement("div"),n=document.createElement("p"),r=document.createElement("input"),a=document.createElement("input"),i=document.createElement("p"),o=document.createElement("button");function d(e){i.textContent=e}return t.classList.add("main-div","div-gap"),n.classList.add("section-title"),r.classList.add("user-input"),a.classList.add("user-input"),o.classList.add("edit-button"),n.textContent="Edit List",r.type="text",r.id="new-list-name",r.value=e.name,r.placeholder="List name...",a.type="text",a.id="new-list-description",a.placeholder="List description...",a.value=e.description,i.textContent=" ",i.id="create-list-message",i.style.textAlign="center",o.textContent="Edit",o.addEventListener("click",(function(){""===r.value?d("Name field is empty"):r.value===e.name&&a.value===e.description?d("No changes have been made"):r.value!==e.name&&z(r.value)?d("Name already exist"):(function(e,t,n){let r=q.findIndex((t=>t===e));q[r].name=t,q[r].description=n,H()}(e,r.value,a.value),window.history.back())})),t.append(n,r,a,o,i),t})(e.data);case tt.ShowList:return(e=>{let t=document.createElement("div"),n=document.createElement("p"),r=document.createElement("p"),a=document.createElement("hr"),i=document.createElement("p");function o(t){let n=t[0];if(1===n.removedNodes.length&&0===e.items.length){n.target.classList.add("item-div");let e=document.createElement("p");e.textContent="No items yet",n.target.append(e)}}return n.textContent=e.name,r.textContent=e.description,i.textContent="Items",t.classList.add("main-div","list-page"),n.classList.add("section-title"),i.classList.add("section-title-smaller"),t.append(n,r,a,i,function(){let t=document.createElement("div");if(new MutationObserver(o).observe(t,{childList:!0}),0===e.items.length){t.classList.add("item-div");let e=document.createElement("p");e.textContent="No items yet",t.append(e)}else e.items.forEach((e=>{t.append(Ke(e))}));return t}()),t})(q.find((t=>t.name===e.data.name)));case tt.CreateItem:return(()=>{let e=document.createElement("div"),t=document.createElement("p"),n=document.createElement("input"),r=document.createElement("div"),a=document.createElement("p"),i=document.createElement("select"),o=document.createElement("div"),d=document.createElement("p"),s=document.createElement("input"),c=document.createElement("button"),u=document.createElement("p");function l(e){u.textContent=e}return e.classList.add("main-div","div-gap"),t.classList.add("section-title"),n.classList.add("user-input"),r.classList.add("select-div"),i.classList.add("user-input"),o.classList.add("select-div"),s.classList.add("user-input"),c.classList.add("create-list-button"),t.textContent="Add an Item",a.textContent="List",d.textContent="Date",c.textContent="Create",u.textContent=" ",n.placeholder="Description... (required)",n.type="text",s.type="date",n.id="new-item-description",i.id="new-item-list",s.id="new-item-date",u.id="create-item-message",u.style.textAlign="center",c.addEventListener("click",(function(){""===n.value?l("Description is required"):""==s.value||function(){let e=new Date;return e.setHours(0,0,0,0),w(e,E(s.value))>=0}(s.value)?(function(e,t,n){R(t,new v(e,t,n))}(n.value,i.value,s.value),n.value="",u.textContent=""):l("Date is earlier than today")})),r.append(a,i),o.append(d,s),e.append(t,n,r,o,c,u),function(){for(let e=0;e<q.length;e++){let t=document.createElement("option");t.text=q[e].name,i.append(t)}}(),e})();case tt.ShowItem:return(e=>{let t=document.createElement("div"),n=document.createElement("p");return n.textContent=e.description,t.classList.add("main-div"),n.classList.add("section-title"),t.append(n),t})(e.data);case tt.EditItem:return et(e.data);default:return(()=>{let e=document.createElement("div"),t=document.createElement("p"),n=document.createElement("div"),r=document.createElement("div"),a=document.createElement("p"),i=document.createElement("img"),o=document.createElement("div");return new MutationObserver((function(e){let t=X(),n=e[0];if(1===n.removedNodes.length&&0===t.length){n.target.classList.add("list-div");let e=document.createElement("p");e.textContent="Nothing due today",n.target.append(e)}})).observe(n,{childList:!0}),t.textContent="Due Today",a.textContent="Your Lists",i.src=g,e.classList.add("main-div"),t.classList.add("section-title"),a.classList.add("section-title"),r.classList.add("section-div"),i.addEventListener("click",(function(){nt(tt.CreateList)})),r.append(a,i),e.append(t,n,r,o),function(){for(let e=0;e<q.length;e++)o.append(Ve(q[e]))}(),function(){let e=X();if(0===e.length){let e=document.createElement("div");e.classList.add("list-div");let t=document.createElement("p");t.textContent="Nothing due today",e.append(t),n.append(e)}else for(let t=0;t<e.length;t++)n.append(Ke(e[t]))}(),e})()}}(n))}function rt(){!0===J()?(document.querySelector("body").classList.add("dark-mode"),console.log("Dark mode enabled")):(document.querySelector("body").classList.remove("dark-mode"),console.log("Dark mode disabled"))}function at(){return document.querySelector("main")}window.addEventListener("popstate",(function(){!function(e){let t=JSON.parse(e);nt(t.name,t.data)}(this.window.history.state)})),(()=>{rt();let e=document.querySelector("#content"),t=document.createElement("main");e.append((()=>{let e=document.createElement("header"),t=document.createElement("img"),n=document.createElement("img"),r=document.createElement("p");return t.src=f,r.textContent="ToDo",n.src=g,t.id="settings-button",r.id="header-title",n.id="add-item-button",t.addEventListener("click",(function(){nt(tt.Settings)})),n.addEventListener("click",(function(e){nt(tt.CreateItem)})),r.addEventListener("click",(function(){nt(tt.Home)})),r.classList.add("header-title"),e.append(t,r,n),e})(),t,(()=>{let e=document.createElement("footer"),t=document.createElement("a");return t.href="https://github.com/Kesslerjx",t.target="_blank",t.textContent="@kesslerjx",e.appendChild(t),e})()),nt(tt.Home)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,